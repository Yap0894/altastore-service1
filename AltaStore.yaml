openapi: 3.0.0
info:
  description: Back-End (RESTful API) Web Application Alta Store
  version: "1.0"
  title: BE Web Application Alta Store

tags:
  - name: Auth
    description: Register and Authentication for User or Admin 
  - name: User
    description: Resource for insert, modifiying and getting Users
  - name: Admin
    description: Resource for insert, modifiying and getting Admins 

paths:
  /v1/register:
    post:
      tags:
        - Auth
      summary: Register new user
      operationId: register
      requestBody:
        description: User object that needs to be register
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        200:
          description: Successfully Register
        400:
          description: Bad Input Parameter
        409:
          description: Email Already Registered

  /v1/login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: login
      requestBody:
        description: User object that needs to be login
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          description: Login Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIdToken"
        400:
          description: Bad Input Parameter
        401:
          description: Incorrect Email or Password
        404:
          description: User Not Found
  /v1/users/{id}:
    get:
      tags:
        - User
      summary: Get user profile
      operationId: Get user profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserData"
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    put:
      tags:
        - User
      summary: Update user profile
      operationId: Update user profile
      requestBody:
        description: User object that needs to be update
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/UserData"
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Update User Information Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    delete:
      tags:
        - User
      summary: Delete user
      operationId: Delete user
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Delete Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
  /v1/users/{id}/password:
    put:
      tags:
        - User
      summary: Change user password
      operationId: Change user password
      requestBody:
        description: User object that needs to be update
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/UserChangePassword"
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Password Changed Successfully
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found

  /v1/register/admin:
    post:
      tags:
        - Auth
      summary: Register Admin
      operationId: Register
      requestBody:
        description: Admin object that needs to be register
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/AdminRegister"
      responses:
        200:
          description: Register Successfully
        400:
          description: Bad Input Parameter
  /v1/login/admin:
    post:
      tags:
        - Auth
      summary: Login admin
      operationId: Login
      requestBody:
        description: Admin object that needs to be login
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/AdminLogin"
      responses:
        200:
          description: Login Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminIdToken"
        400:
          description: Bad Input Parameter
        401:
          description: Incorrect Email or Password
        404:
          description: User Not Found
  /v1/admins/{id}:
    get:
      tags:
        - Admin
      summary: Get Admin profile
      operationId: get Admin profile
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminData"
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    put:
      tags:
        - Admin
      summary: Update Admin profile
      operationId: Update Admin profile
      requestBody:
        description: Admin object that needs to be update
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/AdminData"
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Update Admin Information Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
    delete:
      tags:
        - Admin
      summary: delete Admin
      operationId: delete Admin
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Delete Success
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found
  /v1/admins/{id}/password:
    put:
      tags:
        - Admin
      summary: change Admin password
      operationId: change Admin password
      requestBody:
        description: Admin object that needs to be update
        content:
          application/json:     
            schema:
              $ref: "#/components/schemas/AdminChangePassword"
      parameters:
        - in: path
          name: id
          description: Id to be passed as a path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Password Changed Successfully
        400:
          description: Bad Input Parameter
        404:
          description: User Not Found

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    UserRegister:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        password:
          type: string
          example: Abcd123
      xml:
        name: "Register User"
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        password:
          type: string
          example: Abcd123
      xml:
        name: "user Login"
    UserIdToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          example: "eyJhbGciOiJIUZI1NiIsInR5CCI6IkpXVCJ9.eyJzdWIiOiIxMjMONTY
            30DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4i0nRydWV9.TJVA95
            OrM7E2cBab3 ORMHrHDcEfxjoYZgeFONFhHgQ"
      xml:
        name: "User Id and Token"
    UserData:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        handphone:
          type: string
          example: 081234567891
        address:
          type: string
          example: Jl. Kebun Raya Pulau No 300
      xml:
        name: "User Data"
    UserChangePassword:
      type: object
      properties:
        newpassword:
          type: string
          example: Abcd123
        oldpassword:
          type: string
          example: Abcd125
      xml:
        name: "Change User Password"

    AdminRegister:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
        password:
          type: string
          example: Abcd123
      xml:
        name: "Register Admin"
    AdminLogin:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        password:
          type: string
          example: Abcd123
      xml:
        name: "Admin Login"
    AdminIdToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
          example: "eyJhbGciOiJIUZI1NiIsInR5CCI6IkpXVCJ9.eyJzdWIiOiIxMjMONTY
            30DkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4i0nRydWV9.TJVA95
            OrM7E2cBab3 ORMHrHDcEfxjoYZgeFONFhHgQ"
      xml:
        name: "Admin Id and Token"
    AdminData:
      type: object
      properties:
        email:
          type: string
          example: abc@def.com
        firstName:
          type: string
          example: Hardi
        lastname:
          type: string
          example: Jackson
      xml:
        name: "Admin Data"
    AdminChangePassword:
      type: object
      properties:
        newpassword:
          type: string
          example: Abcd123
        oldpassword:
          type: string
          example: Abcd125
      xml:
        name: "Change Admin Password"